// <auto-generated />
using System;
using Labb4_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bokhandel.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20220504110832_addedbookurl")]
    partial class addedbookurl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bokhandel.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("BookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Sigge Eklund",
                            BookUrl = "https://media.bonnierforlagen.se/bokbilder/tif/9789100127473.jpg?timestamp=20160307042105",
                            Description = "Bla bla bla",
                            Title = "In i labyrinten"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Alexander Schulman",
                            BookUrl = "https://media.bonnierforlagen.se/bokbilder/tif/9789100182496.jpg?timestamp=20200511074633",
                            Description = "Bla bla bla",
                            Title = "The Survivors"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "J.K Rowling",
                            BookUrl = "https://image.bokus.com/images/9789129723953_200x_harry-potter-och-fangen-fran-azkaban",
                            Description = "Bla bla bla",
                            Title = "Harry Potter & The Prisoner From Azkaban"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Dan Brown",
                            BookUrl = "https://donateanybook.com/wp-content/uploads/2020/06/the-da-vinci-code-589f9cee3df78c4758a2d9e7.jpg",
                            Description = "Bla bla bla",
                            Title = "The Da Vinci Code"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Dan Brown",
                            BookUrl = "https://d3525k1ryd2155.cloudfront.net/h/525/436/535436525.0.m.jpg",
                            Description = "Bla bla bla",
                            Title = "Angels and Demons"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Yann Martel",
                            BookUrl = "https://kbimages1-a.akamaihd.net/d33e35b8-5e64-42ce-a67e-102f934788d7/1200/1200/False/life-of-pi.jpg",
                            Description = "Bla bla bla",
                            Title = "Life of Pi"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Sebastian Faulks",
                            BookUrl = "https://images-na.ssl-images-amazon.com/images/I/71nV-ZcSeAL.jpg",
                            Description = "Bla bla bla",
                            Title = "Birdsong"
                        });
                });

            modelBuilder.Entity("Bokhandel.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("PhoneNr")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Olnirsvägen 50B",
                            Email = "rasmusekbom97@gmail.com",
                            Name = "Rasmus Ekbom",
                            PhoneNr = 768016461
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Olnirsvägen 50A",
                            Email = "anitrangoen@gmail.com",
                            Name = "Anitra Ngoensuwan",
                            PhoneNr = 768142421
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Freddegatan 1B",
                            Email = "fredrikolsson@gmail.com",
                            Name = "Fredrik Olsson",
                            PhoneNr = 761535155
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Kimgatan 13A",
                            Email = "kimtikkanen@gmail.com",
                            Name = "Kim Tikkanen",
                            PhoneNr = 767257257
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "Sveddegatan 36B",
                            Email = "fredrikdsvedin@gmail.com",
                            Name = "Fredrik Svedin",
                            PhoneNr = 761351355
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "Backböjen 4",
                            Email = "danielekbom@gmail.com",
                            Name = "Daniel Ekbom",
                            PhoneNr = 767646737
                        },
                        new
                        {
                            CustomerId = 7,
                            Address = "Grothgatan 3B",
                            Email = "angroth@gmail.com",
                            Name = "An Groth",
                            PhoneNr = 768368388
                        },
                        new
                        {
                            CustomerId = 8,
                            Address = "Umeågatan 74A",
                            Email = "albinandersson@gmail.com",
                            Name = "Albin Andersson",
                            PhoneNr = 761351355
                        });
                });

            modelBuilder.Entity("Bokhandel.Models.CustomerBooks", b =>
                {
                    b.Property<int>("CustomerBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBooks");

                    b.HasData(
                        new
                        {
                            CustomerBookId = 1,
                            BookId = 1,
                            CustomerId = 1,
                            EndDate = new DateTime(2022, 5, 24, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(6212),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 24, 13, 8, 32, 558, DateTimeKind.Local).AddTicks(7074)
                        },
                        new
                        {
                            CustomerBookId = 2,
                            BookId = 2,
                            CustomerId = 2,
                            EndDate = new DateTime(2022, 5, 26, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7023),
                            IsReturned = true,
                            StartDate = new DateTime(2022, 5, 1, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(6998)
                        },
                        new
                        {
                            CustomerBookId = 3,
                            BookId = 3,
                            CustomerId = 3,
                            EndDate = new DateTime(2022, 5, 9, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7044),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 29, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7040)
                        },
                        new
                        {
                            CustomerBookId = 4,
                            BookId = 4,
                            CustomerId = 4,
                            EndDate = new DateTime(2022, 5, 30, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7053),
                            IsReturned = true,
                            StartDate = new DateTime(2022, 4, 26, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7049)
                        },
                        new
                        {
                            CustomerBookId = 5,
                            BookId = 5,
                            CustomerId = 5,
                            EndDate = new DateTime(2022, 5, 25, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7105),
                            IsReturned = true,
                            StartDate = new DateTime(2022, 5, 3, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7101)
                        },
                        new
                        {
                            CustomerBookId = 6,
                            BookId = 6,
                            CustomerId = 6,
                            EndDate = new DateTime(2022, 5, 17, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7117),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 19, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7113)
                        },
                        new
                        {
                            CustomerBookId = 7,
                            BookId = 7,
                            CustomerId = 7,
                            EndDate = new DateTime(2022, 5, 18, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7124),
                            IsReturned = true,
                            StartDate = new DateTime(2022, 4, 28, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7120)
                        },
                        new
                        {
                            CustomerBookId = 8,
                            BookId = 3,
                            CustomerId = 8,
                            EndDate = new DateTime(2022, 5, 20, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7131),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 28, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7128)
                        },
                        new
                        {
                            CustomerBookId = 9,
                            BookId = 2,
                            CustomerId = 1,
                            EndDate = new DateTime(2022, 5, 21, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7137),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 21, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7134)
                        },
                        new
                        {
                            CustomerBookId = 10,
                            BookId = 3,
                            CustomerId = 2,
                            EndDate = new DateTime(2022, 5, 23, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7146),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 27, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7143)
                        },
                        new
                        {
                            CustomerBookId = 11,
                            BookId = 4,
                            CustomerId = 3,
                            EndDate = new DateTime(2022, 5, 20, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7153),
                            IsReturned = true,
                            StartDate = new DateTime(2022, 5, 2, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7150)
                        },
                        new
                        {
                            CustomerBookId = 12,
                            BookId = 5,
                            CustomerId = 4,
                            EndDate = new DateTime(2022, 5, 17, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7160),
                            IsReturned = false,
                            StartDate = new DateTime(2022, 4, 29, 13, 8, 32, 560, DateTimeKind.Local).AddTicks(7157)
                        });
                });

            modelBuilder.Entity("Bokhandel.Models.CustomerBooks", b =>
                {
                    b.HasOne("Bokhandel.Models.Book", null)
                        .WithMany("CustomerBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bokhandel.Models.Customer", null)
                        .WithMany("CustomerBooks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
